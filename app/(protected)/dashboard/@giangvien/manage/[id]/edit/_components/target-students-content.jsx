"use client"

import { Plus, Trash } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"

import { useState, useEffect } from "react"
import { useGetCourseMetaQuery, useCreateCourseMetaMutation } from '@/app/features/courses/courseApi';
import { toast } from "sonner"
import LoadingSpinner from "@/app/_components/LoadingSpinner";

export function TargetStudentsContent({ courseId }) {
  const { data, error } = useGetCourseMetaQuery(courseId);
  const [createCourseMeta, { isLoading }] = useCreateCourseMetaMutation();
  const [isChange, setChanged] = useState(false);
  const courseMeta = data?.result?.meta;

  const [courseData, setCourseData] = useState({
    goal: [],
    audience: [],
    requirement: []
  });

  const generateDefaultList = (count = 3) =>
    Array.from({ length: count }, (_, i) => ({
      id: "",
      content: "",
      index: i + 1,
      dirty: false
    }));


  useEffect(() => {
    if (!courseMeta) return;

    const transform = (arr) =>
      (arr?.length > 0
        ? arr
        : generateDefaultList()
      ).map((item, index) => ({
        ...item,
        id: item.id,
        content: item.content || "",
        index,
        dirty: false,
      }));

    setCourseData({
      goal: transform(courseMeta.GOAL),
      audience: transform(courseMeta.AUDIENCE),
      requirement: transform(courseMeta.REQUIREMENT),
    });
  }, [courseMeta]);

  const addField = (fieldName) => {
    setCourseData((prev) => {
      const currentList = prev[fieldName] || [];
      const nextIndex = currentList.length + 1;
      const newItem = { id: "", content: "", index: nextIndex };
      return {
        ...prev,
        [fieldName]: [...currentList, newItem],
      };
    });
  };

  const updateField = (fieldName, index, value) => {
    setCourseData((prev) => {
      const updatedList = [...prev[fieldName]];
      updatedList[index] = {
        ...updatedList[index],
        content: value,
        dirty: true,
      };
      return {
        ...prev,
        [fieldName]: updatedList,
      };
    });
    setChanged(true);
  };

  const removeField = (field, index) => {
    setCourseData((prev) => {
      const updatedList = [...prev[field]];
      if (updatedList.length <= 1) return prev;
      updatedList.splice(index, 1);
      return {
        ...prev,
        [field]: updatedList,
      };
    });
    setChanged(true);
  };

  const buildChangedMeta = () => {
    const changedMeta = {};

    const filterDirty = (arr) =>
      (arr || []).filter((item) => item.dirty).map((item) => ({
        id: item.id,
        content: item.content.trim(),
        index: item.index
      }));

    const addIfChanged = (field, list) => {
      const changedItems = filterDirty(list);
      if (changedItems.length > 0) {
        changedMeta[field] = changedItems;
      }
    };

    addIfChanged("goal", courseData.goal);
    addIfChanged("audience", courseData.audience);
    addIfChanged("requirement", courseData.requirement);

    return changedMeta;
  };

  const resetDirtyFlags = () => {
    const resetList = (list) =>
      list.map((item) => ({ ...item, dirty: false }));

    setCourseData((prev) => ({
      goal: resetList(prev.goal),
      audience: resetList(prev.audience),
      requirement: resetList(prev.requirement),
    }));
  };

  const handleSave = async () => {
    const changed = buildChangedMeta()
    if (Object.keys(changed).length === 0) {
      toast.info("Kh√¥ng c√≥ g√¨ ƒë·ªÉ l∆∞u", {
        description: "Sunday, December 03, 2023 at 9:00 AM",
        action: {
          label: "Undo",
        },
        duration: 2000,
        position: "top-right",
      })
      setIsSaving(false);
      return;
    }

    console.log("üì¶ D·ªØ li·ªáu chu·∫©n b·ªã g·ª≠i:", {
      courseId,
      meta: changed,
    });

    try {
      const response = await createCourseMeta({ courseId, meta: changed }).unwrap();
      console.log("Response from backend:", response);
      resetDirtyFlags();
      setChanged(false);
      toast.success("L∆∞u th√†nh c√¥ng!", {
        description: "Sunday, December 03, 2023 at 9:00 AM",
        action: {
          label: "Undo",
        },
        duration: 2000,
        position: "top-right",
      })
    } catch (err) {
      const errorCode = err?.data?.code;
      if (errorCode === 1007) {
        toast.error("L·ªói khi l∆∞u!", {
          description: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a",
          action: {
            label: "Undo",
          },
          duration: 2000,
          position: "top-right",
        })
      } else {
        toast.error("L·ªói khi l∆∞u!", {
          description: "Sunday, December 03, 2023 at 9:00 AM",
          action: {
            label: "Undo",
          },
          duration: 2000,
          position: "top-right",
        })
      }

    }
  };


  return (
    <div className="max-w-4xl mx-auto p-6 m-4  border rounded-md shadow-lg">
      <div className="flex justify-between">
        <h1 className="text-2xl font-bold mb-6">H·ªçc vi√™n m·ª•c ti√™u</h1>
        {isLoading && <LoadingSpinner />}
        <Button
          variant="ghost"
          onClick={handleSave}
          disabled={isLoading}
          className={`p-1w-full ${!isChange
            ? "text-white-400 bg-gray-400 cursor-not-allowed hover:bg-gray-400"
            : "bg-cyan-300 hover:bg-cyan-500"
            }`}
        >
          L∆∞u
        </Button>
      </div>

      <div className="space-y-8">
        <div>
          <h2 className="text-lg font-semibold mb-4">
            C√°c m·ª•c ƒë√≠ch h·ªçc t·∫≠p m√† h·ªçc vi√™n c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c sau khi ho√†n th√†nh kh√≥a h·ªçc c·ªßa b·∫°n l√† g√¨?
          </h2>
          <p className="text-sm text-gray-600 mb-4">
            B·∫°n ph·∫£i nh·∫≠p √≠t nh·∫•t 4 m·ª•c ti√™u h·ªçc t·∫≠p ho·∫∑c k·∫øt qu·∫£ m√† h·ªçc vi√™n c√≥ th·ªÉ mong ƒë·ª£i ƒë·∫°t ƒë∆∞·ª£c sau khi ho√†n
            th√†nh kh√≥a h·ªçc c·ªßa b·∫°n.
          </p>

          <div className="space-y-3">
            {courseData.goal.map((goal, index) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  placeholder="V√≠ d·ª•: X√°c ƒë·ªãnh c√°c v·∫•n ƒë·ªÅ c∆° b·∫£n c·ªßa b·∫°n"
                  className="flex-1"
                  key={index}
                  value={goal.content}
                  onChange={(e) => updateField("goal", index, e.target.value)}
                />
                <span
                  className={`text-sm min-w-[3rem] ${goal.content.length >= 160 ? "text-red-500 font-semibold cursor-help" : "text-gray-500"
                    }`}
                  title={goal.content.length >= 160 ? "B·∫°n ƒë√£ nh·∫≠p qu√° s·ªë k√Ω t·ª± cho ph√©p" : ""}
                >
                  {goal.content.length}/160
                </span>
                <Button
                  variant="ghost"
                  onClick={() => removeField("goal", index)}
                  className={`p-1 ${courseData.goal.length <= 1
                    ? "text-gray-400 cursor-not-allowed"
                    : "text-red-500 hover:text-red-600"
                    }`}
                  title={
                    courseData.goal.length <= 1
                      ? "C·∫ßn √≠t nh·∫•t 1 m·ª•c ti√™u ‚Äî kh√¥ng th·ªÉ xo√° h·∫øt"
                      : "Xo√° m·ª•c n√†y"
                  }
                >
                  <Trash className="w-4 h-4" />
                </Button>
              </div>
            ))}

            <Button
              variant="ghost"
              onClick={() => addField("goal")}
              className="text-purple-600 hover:text-purple-700"
            >
              <Plus className="w-4 h-4 mr-2" />
              Th√™m n·ªôi dung v√†o ph·∫ßn M·ª•c ti√™u c·ªßa b·∫°n
            </Button>
          </div>
        </div>

        <div>
          <h2 className="text-lg font-semibold mb-4">
            Y√™u c·∫ßu ho·∫∑c ƒëi·ªÅu ki·ªán ti√™n quy·∫øt ƒë·ªÉ tham gia kh√≥a h·ªçc c·ªßa b·∫°n l√† g√¨?
          </h2>
          <p className="text-sm text-gray-600 mb-4">
            Li·ªát k√™ c√°c k·ªπ nƒÉng, kinh nghi·ªám, c√¥ng c·ª• ho·∫∑c thi·∫øt b·ªã m√† h·ªçc vi√™n c·∫ßn c√≥ tr∆∞·ªõc khi tham gia kh√≥a h·ªçc. N·∫øu
            kh√¥ng c√≥ y√™u c·∫ßu g√¨ ƒë·∫∑c bi·ªát, h√£y t·∫≠n d·ª•ng kh√¥ng gian n√†y ƒë·ªÉ h·∫° th·∫•y r√†o c·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.
          </p>

          <div className="space-y-3">
            {courseData.requirement.map((requirement, index) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  placeholder="V√≠ d·ª•: Kh√¥ng c·∫ßn kinh nghi·ªám l·∫≠p tr√¨nh. B·∫°n s·∫Ω h·ªçc m·ªçi th·ª© b·∫°n c·∫ßn bi·∫øt"
                  className="flex-1"
                  key={index}
                  value={requirement.content}
                  onChange={(e) => updateField("requirement", index, e.target.value)}
                />
                <span
                  className={`text-sm min-w-[3rem] ${requirement.content?.length >= 160 ? "text-red-500 font-semibold cursor-help" : "text-gray-500"
                    }`}
                  title={requirement.content.length >= 160 ? "B·∫°n ƒë√£ nh·∫≠p qu√° s·ªë k√Ω t·ª± cho ph√©p" : ""}
                >
                  {requirement.content.length || 0}/160
                </span>
                <Button
                  variant="ghost"
                  onClick={() => removeField("requirement", index)}
                  className={`p-1 ${courseData.requirement?.length <= 1
                    ? "text-gray-400 cursor-not-allowed"
                    : "text-red-500 hover:text-red-600"
                    }`}
                  title={
                    courseData.requirement?.length <= 1
                      ? "C·∫ßn √≠t nh·∫•t 1 m·ª•c ti√™u ‚Äî kh√¥ng th·ªÉ xo√° h·∫øt"
                      : "Xo√° m·ª•c n√†y"
                  }
                >
                  <Trash className="w-4 h-4" />
                </Button>
              </div>
            ))}
            <Button
              variant="ghost"
              onClick={() => addField("requirement")}
              className="text-purple-600 hover:text-purple-700"
            >
              <Plus className="w-4 h-4 mr-2" />
              Th√™m n·ªôi dung v√†o ph·∫ßn Y√™u c·∫ßu c·ªßa b·∫°n
            </Button>

          </div>
        </div>

        <div>
          <h2 className="text-lg font-semibold mb-4">Kh√≥a h·ªçc n√†y d√†nh cho ai?</h2>
          <p className="text-sm text-gray-600 mb-4">
            Vi·∫øt m√¥ t·∫£ r√µ r√†ng v·ªÅ h·ªçc vi√™n m·ª•c ti√™u cho kh√≥a h·ªçc c·ªßa b·∫°n, nh·ªØng ng∆∞·ªùi s·∫Ω th·∫•y n·ªôi dung c·ªßa b·∫°n c√≥ gi√°
            tr·ªã. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n thu h√∫t h·ªçc vi√™n ph√π h·ª£p v·ªõi kh√≥a h·ªçc c·ªßa b·∫°n.
          </p>

          <div className="space-y-3">
            {courseData.audience.map((audience, index) => (
              <div key={index}>
                <Textarea
                  placeholder="V√≠ d·ª•: C√°c nh√† ph√°t tri·ªÉn Python c√≥ kinh nghi·ªám mu·ªën h·ªçc Django"
                  className="min-h-[100px] mb-2"
                  key={index}
                  value={audience.content}
                  onChange={(e) => updateField("audience", index, e.target.value)}
                />
                <span
                  className={`text-sm min-w-[3rem] ${audience.content?.length >= 160 ? "text-red-500 font-semibold cursor-help" : "text-gray-500"
                    }`}
                  title={audience.content?.length >= 160 ? "B·∫°n ƒë√£ nh·∫≠p qu√° s·ªë k√Ω t·ª± cho ph√©p" : ""}
                >
                  {audience.content?.length || 0}/160
                </span>
                <Button
                  variant="ghost"
                  onClick={() => removeField("audience", index)}
                  className={`p-1 ${courseData.audience?.length <= 1
                    ? "text-gray-400 cursor-not-allowed"
                    : "text-red-500 hover:text-red-600"
                    }`}
                  title={
                    courseData.audience?.length <= 1
                      ? "C·∫ßn √≠t nh·∫•t 1 m·ª•c ti√™u ‚Äî kh√¥ng th·ªÉ xo√° h·∫øt"
                      : "Xo√° m·ª•c n√†y"
                  }
                >
                  <Trash className="w-4 h-3 m-2" />
                </Button>
              </div>
            ))}
            <Button
              variant="ghost"
              onClick={() => addField("audience")}
              className="text-purple-600 hover:text-purple-700"
            >
              <Plus className="w-4 h-4 mr-2" />
              Th√™m n·ªôi dung v√†o ph·∫ßn ƒê·ªëi t∆∞·ª£ng c·ªßa b·∫°n
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
